// Generated by CoffeeScript 1.10.0
var app, isOld, parseTkwDescription;

app = angular.module('app', ['ngRoute']);

Object.defineProperty(Array.prototype, 'chunk', {
  value: function(chunkSize) {
    var R, i;
    R = [];
    i = 0;
    while (i < this.length) {
      R.push(this.slice(i, i + chunkSize));
      i += chunkSize;
    }
    while (R[R.length - 1].length !== chunkSize) {
      R[R.length - 1].push([]);
    }
    return R;
  }
});

app.config([
  '$routeProvider', function($routeProvider) {
    $routeProvider.when('/', {
      templateUrl: 'www/partials/dashboard.html',
      controller: 'DashboardController'
    }).when('/customers', {
      templateUrl: 'www/partials/customers.html',
      controller: 'CustomersController'
    }).when('/projects', {
      templateUrl: 'www/partials/projects.html',
      controller: 'ProjectsController'
    }).when('/projects/code_review', {
      templateUrl: 'www/partials/projects.html',
      controller: 'CodeReviewProjectsController'
    }).when('/tecknoworkers', {
      templateUrl: 'www/partials/tecknoworkers.html',
      controller: 'TecknoworkersController'
    }).when('/projects/code_review/history', {
      templateUrl: 'www/partials/history.html',
      controller: 'HistoryController'
    }).when('/projects/code_review/history/week/:id/year/:id',{
      templateUrl: 'www/partials/projectsperweek.html',
      controller: 'ProjectsPerWeekController'
    }).otherwise({
      redirectTo: '/'
    });
  }
]);

app.filter('percentage', [
  '$window', function($window) {
    return function(input, decimals, suffix) {
      var r;
      decimals = angular.isNumber(decimals) ? decimals : 0;
      suffix = suffix || '%';
      if ($window.isNaN(input)) {
        return 0 + suffix;
      }
      r = Math.round(input * Math.pow(10, decimals + 2)) / Math.pow(10, decimals);
      if (r === Infinity) {
        r = 0;
      }
      return r + suffix;
    };
  }
]);

app.filter('day', [
  '$window', function($window) {
    return function(input) {
      var r;
      days = {"0": "Monday",
              "1": "Tuesday",
              "2": "Wednesday",
              "3": "Thursday",
              "4": "Friday",
              "5": "Saturday",
              "6": "Sunday",
             }
      return days[input]
    };
  }
]);

isOld = function(prj) {
  var date;
  if (prj.last_activity == null) {
    return true;
  }
  date = new Date();
  date.setTime(date.getTime() - 30 * 24 * 60 * 60 * 1000);
  return new Date(prj.last_activity) < date;
};

parseTkwDescription = function(prj) {
  var error, json, json_string;
  try {
    json_string = prj.description.split('----')[1];
    json = JSON.parse(json_string);
    // console.log(json)
    return json;
  } catch (error) {
    // console.log(prj.description);
    return {};
  }
};

getStatuses = function(projects, field) {
  var statusList = [];
  for (var i = 0; i < projects.length; i++){
    var exist = false;
    var status = projects[i].tkwDescription[field];
    if (status != null) {
      for (var j = 0; j < statusList.length; j++ ){
        if (status.toLowerCase() == statusList[j].toLowerCase()){
          exist = true;
        }
      }
      if (!exist){
        statusList.push(projects[i].tkwDescription[field].toLowerCase());
      }
    }
  }
  statusList.push("without status");
  return statusList;
};

filterProjects = function(list, projects, field){
  filteredProjects = [];
  for(var i = 0; i < projects.length; i++){
    for(var j = 0; j < list.length; j++){
      if(projects[i].tkwDescription[field] == null) {
        if (list[j] == "without status"){
          filteredProjects.push(projects[i]);
          break;
        }
      }else
      if (projects[i].tkwDescription[field].toLowerCase() == list[j].toLowerCase()){
        filteredProjects.push(projects[i]);
        break;
      }
    }
  }
  return filteredProjects;
};
